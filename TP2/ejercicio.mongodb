use empresa;
db.createCollection("empleados");
db.empleados.insertMany([
  { nombre: "Juan", edad: 30, puesto: "Ventas" },
  { nombre: "Ana", edad: 25, puesto: "Marketing" },
  { nombre: "Luis", edad: 35, puesto: "Recursos Humanos" },
  { nombre: "Maria", edad: 28, puesto: "Desarrollo" },
  { nombre: "Pedro", edad: 40, puesto: "Finanzas" },
  { nombre: "Laura", edad: 32, puesto: "pasante" }
]);

// Consultar todos los empleados
db.empleados.find({});

// Actualizar edad de un empleado
db.empleados.updateOne(
  { nombre: "Juan" },
  { $set: { edad: 31 } }
);

// Eliminar un empleado con puesto pasante
db.empleados.deleteOne({
  puesto: "pasante"
})

// Numeros de empleados entre 25 y 40 años
db.empleados.find({
  $and: [
    { edad: { $gt: 25 } },
    { edad: { $lt: 40 } },
  ]
});

// MOSTRAR NOMBRES DE EMPLEADOS Y PUESTOS SIN EL _ID
db.empleados.find({}, { _id: 0, nombre: 1, puesto: 1 });


// Agregar un campo dirección a todos los empleados con un array de calle, ciudad y dirección
db.empleados.updateMany(
  {},
  {
    $set: {
      direccion: {
        calle: "",
        ciudad: "",
        dirección: ""
      }
    }
  }
);

// Mostrar empleados con dirección
db.empleados.find({})

// Encontrar empleados mayores de 30 años
db.empleados.find({ edad: { $gt: 30 } });

// Dada una colección ventas con campos: producto, cantidad y precio_unitario, caclcular el total de ventas por producto.
db.createCollection("ventas");
db.ventas.insertMany([
  { producto: "Discos de Vinilo", cantidad: 10, precio_unitario: 80000 },
  { producto: "Cassettes", cantidad: 20, precio_unitario: 15000 },
  { producto: "CD's", cantidad: 5, precio_unitario: 20000 },
  { producto: "Remeras", cantidad: 15, precio_unitario: 12000 },
]);

db.ventas.find({});

db.ventas.aggregate([
  {
    $group: {
      _id: "$producto",
      total: { $sum: { $multiply: ["$cantidad", "$precio_unitario"] } }
    }
  }
])

// Crea un índice compuesto sobre la colección clientes, con los campos apellido y nombre. 
db.createCollection("clientes");
db.clientes.insertMany([
  { nombre: "Juan", apellido: "Pérez" },
  { nombre: "Ana", apellido: "Gómez" },
  { nombre: "Luis", apellido: "Fernández" },
  { nombre: "Maria", apellido: "López" },
  { nombre: "Pedro", apellido: "Martínez" },
  { nombre: "Laura", apellido: "Sánchez" }
]);

// Indice compuesto con apellido y nombre
db.clientes.createIndex({ apellido: 1, nombre: 1 });

// Crear una colección alumnos y cursos
db.createCollection("alumnos");
db.createCollection("cursos");



// 7. Crear una colección alumnos y cursos. Luego insertar documentos donde los alumnos tengan una lista de id_curso referenciando a los cursos.

db.createCollection("alumnos");
db.createCollection("cursos");

db.cursos.insertMany([
  { _id: 1, nombre: "Probabilidad y Estadística", profesor: "Enzo Perez" },
  { _id: 2, nombre: "Programación III", profesor: "Franco Mastantuono" },
  { _id: 3, nombre: "Inglés II", profesor: "Gonzalo Montiel" },
  { _id: 4, nombre: "Metodologías de Sistemas", profesor: "Sebastián Driussi" },
  { _id: 5, nombre: "Análisis Matemático I", profesor: "Giuliano Galoppo" }
]);

db.alumnos.insertMany([
  { nombre: "Juan", edad: 20, id_curso: [1, 2] },
  { nombre: "Ana", edad: 22, id_curso: [2, 3, 1] },
  { nombre: "Luis", edad: 21, id_curso: [1, 4] },
  { nombre: "Maria", edad: 23, id_curso: [3, 5] },
  { nombre: "Pedro", edad: 24, id_curso: [2, 4, 3] },
]);

//ejercicio 8: Uso de $lookup Realiza una agregación donde se combinen los datos de alumnos y cursos usando $lookup.

db.alumnos.aggregate([
  {
    $lookup: {
      from : "cursos",
      localField: "id_curso",
      foreignField: "_id",
      as: "cursos_info"
    }
  },
]);
// Ejercicio 9

/*
Usar un Replica Set nos aporta alta disponibilidad y tolerancia a fallos, porque si un servidor falla, hay otro servidor que puede
tomar el control y seguir funcionando. Es útil para aplicaciones críticas que no pueden permitirse tiempo de inactividad.
Además permite la lectura en servidores secundarios por lo que los datos al estar siempre disponibles  mejoran el rendimiento y la escalabilidad de un sistema.

El Sharding nos deja incorporar nodos adicionales a la base de datos para distribuir la carga de trabajo y mnejorar el rendimiento,
esto se vuelca en una capacidad de almacenamiento y procesamiento mucho mayor a la hora de escalar un sistema.

Al manejar una cantidad de datos muy grande y fragmentarla en varias bases de datos, es mas eficiente el procesamiento de esos datos, por esto el Sharding nos deja
manejar un mayor volumen transacciones, consultas y actualizaciones.
*/

// Ejercicio 10: Seguridad y backups. Muestra los pasos para crear
// un usuario con permisos de lectura y escritura y los comandos
// necesarios para hacer backup y restauración de una base de datos.

// Creación del usuario
db.createUser({
  user: "Marty",
  pwd: "mcfly",
//   roles: ["readWrite"]  //con esto ya se le están dando los permisos de lectura escritura
});

// Cambio al usuario creado
db.auth("Marty", "mcfly");

//Intento hacer algo sin permisos
db.empleados.find({});
db.empleados.updateOne(
    { nombre: "Juan" },
    { $set: { edad: 31 } }
  );

// Asignación de permisos al usuario creado
db.grantRolesToUser("Marty", ["readWrite"]);

// Backup de la base de datos
mongodump -d empresa -o empresa_backup;
// en empresa va el nombre de la base de datos y en empresa_backup va
// el nombre del archivo del backup que se quiere hacer

// Borro de la base de datos
db.dropDatabase();

//Consulto la Base de Datos
db.empleados.find({});

// Restauración de la base de datos
mongorestore -d empresa empresa_backup; 
// en empresa va el nombre de la base de datos a restaurary en empresa_backup va
// el nombre del archivo del backup que se quiere restaurar
// Hay que aegurarse siempre que la base de datos este vacia antes
// de hacer la restauración.

//Consulto la Base de Datos
db.empleados.find({});


